---
format:
  html:
    embed-resources: true
    code-fold: true
    echo: false
---

```{python}
# depress the warnings
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import plotly.express as px
df=pd.read_csv("./listings_cleaned.csv")
df['rating'] = pd.to_numeric(df['rating'], errors='coerce')
df['bedrooms'] = pd.to_numeric(df['bedrooms'], errors='coerce')
df['baths'] = pd.to_numeric(df['baths'], errors='coerce')
df_cleaned = df.dropna(subset=['price', 'bedrooms', 'baths', 'rating'])
df_cleaned['neighbourhood'] = df_cleaned['neighbourhood'].str.split(',').str[0]
unique_neighbourhoods = df_cleaned['neighbourhood'].unique()
# Define a color map using Pastel1
colors = px.colors.qualitative.Pastel1 
color_map = {neighbourhood: colors[i % len(colors)] for i, neighbourhood in enumerate(unique_neighbourhoods)}
```

```{python}

fig = px.scatter(df_cleaned, x="price", y="rating", size='minimum_nights',color="neighbourhood",
           hover_name="neighbourhood", log_x=True, size_max=100,color_discrete_map=color_map )
fig.update_layout(
    plot_bgcolor='whitesmoke',  # Inner background color
    paper_bgcolor='whitesmoke'# Outer background color
)
fig.show()

# save the plot into a html file
fig.write_html("scatter.html")
```

```{python}
fig = px.parallel_coordinates(df_cleaned, color='rating',
                              dimensions=['rating', 'bedrooms', 'baths', 'price'],
                              color_continuous_scale=px.colors.qualitative.Pastel1,
                              labels={'rating': 'Rating', 'bedrooms': 'Bedrooms',
                                      'baths': 'Bathrooms', 'price': 'Price'})
fig.update_layout(
    plot_bgcolor='whitesmoke',  # Inner background color
    paper_bgcolor='whitesmoke' # Outer background color
)
fig.show()

fig.write_html("parallel.html")
```

```{python}
fig = px.scatter_3d(df_cleaned, x='price', y='bedrooms', z='baths',
                    color='rating', size='rating',
                    color_continuous_scale=px.colors.qualitative.Pastel1)
fig.show()
fig.write_html("3dscatter.html")
```

```{python}
fig = px.scatter(df_cleaned, x="price", y="rating",
                 size="bedrooms", color="baths",
                 hover_name="neighbourhood", log_x=True, size_max=60,color_continuous_scale=px.colors.qualitative.Pastel1)
fig.update_layout(
    plot_bgcolor='whitesmoke',  # Inner background color
    paper_bgcolor='whitesmoke' # Outer background color
)
fig.show()
fig.write_html("scatter2.html")
```

```{python}
fig = px.box(df_cleaned, x="neighbourhood", y="price",
             color="neighbourhood",
             notched=True,color_discrete_map=color_map )  # can toggle notched shape
fig.update_layout(
    plot_bgcolor='whitesmoke',  # Inner background color
    paper_bgcolor='whitesmoke')
fig.show()
fig.write_html("box.html")
```

```{python}
fig = px.density_heatmap(df_cleaned, x="bedrooms", y="baths", marginal_x="rug", marginal_y="histogram",color_continuous_scale=px.colors.qualitative.Pastel1)
fig.show()
fig.write_html("density.html")
```


```{python}
fig = px.density_contour(df_cleaned, x="price", y="rating", color="neighbourhood",range_x=[0, 2000],range_y=[0,5.5],color_discrete_map=color_map )
fig.update_layout(
    plot_bgcolor='whitesmoke',  # Inner background color
    paper_bgcolor='whitesmoke' # Outer background color
)
fig.show()
fig.write_html("density2.html")
```